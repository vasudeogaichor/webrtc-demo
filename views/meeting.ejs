<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Meeting <%= meetingId %></title>
    <link rel="stylesheet" href="/style.css" />
  </head>

  <body>
    <h1>Meeting ID: <%= meetingId %></h1>
    <!-- <video id="localVideo" autoplay playsinline muted></video>
    <div id="remoteVideos"></div> -->

    <div id="videoContainer">
      <div id="localContainer">
        <h3>My Video</h3>
        <video id="localVideo" autoplay playsinline muted></video>
      </div>
      <div id="remoteContainer">
        <h3>Participants</h3>
        <!-- Remote videos will be added here dynamically -->
      </div>
    </div>

    <button onclick="leaveMeeting()">Leave Meeting</button>

    <script>
      const meetingId = "<%= meetingId %>";
      let myPeerId;
      const ws = new WebSocket(`ws://${window.location.host}`);
      const peers = {};
      let remoteStreams = {};
      const localVideo = document.getElementById("localVideo");
      const remoteContainer = document.getElementById("remoteContainer");
      let localStream;
      let pendingOffers = [];
      let pendingParticipants = [];
      ws.onopen = () => {
        ws.send(JSON.stringify({ type: "join-meeting", meetingId }));
      };

      navigator.mediaDevices
        .getUserMedia({ video: true, audio: true })
        .then((stream) => {
          localStream = stream;
          localVideo.srcObject = stream;
          console.log("localStream - ", localStream);
          pendingOffers.forEach(({ offer, peerId }) =>
            handleOffer(offer, peerId, localStream)
          );
          pendingOffers = [];

          pendingParticipants.forEach((peerId) =>
            startPeerConnection(peerId, localStream)
          );
          pendingParticipants = [];
        })
        .catch((error) =>
          console.error("Error accessing media devices.", error)
        );

      ws.onmessage = (event) => {
        console.log("event - ", event);
        const message = JSON.parse(event.data);
        console.log("Received: frontend", message);

        switch (message.type) {
          case "new-participant":
            // startPeerConnection(message.peerId, localStream);
            if (!localStream) {
              console.log(
                "Stream not ready. Queuing participant:",
                message.peerId
              );
              pendingParticipants.push(message.peerId);
            } else {
              startPeerConnection(message.peerId, localStream);
            }
            break;
          case "existing-participants":
            myPeerId = message.currentPeerId;
            // message.peers.forEach((peerId) =>
            //   startPeerConnection(peerId, localStream)
            // );
            if (!localStream) {
              console.log("Stream not ready. Queuing participant:");
              pendingParticipants.push(
                ...message.peers.map((ele) => ele.peerId)
              );
            } else {
              startPeerConnection(message.peerId, localStream);
            }
            break;
          case "offer":
            if (!localStream) {
              console.log("Stream not ready. Queuing offer...");
              pendingOffers.push({
                offer: message.payload,
                peerId: message.peerId,
              });
            } else {
              handleOffer(message.payload, message.peerId, localStream);
            }
            // handleOffer(message.payload, message.peerId, localStream);
            break;
          case "answer":
            handleAnswer(message.payload, message.peerId);
            break;
          case "candidate":
            handleCandidate(message.payload, message.peerId);
            break;
          case "participant-left":
            handleRemoteDisconnection(message.peerId);
            break;
        }
      };

      function startPeerConnection(peerId, stream) {
        console.log("startPeerConnection - ", peerId, peers[peerId]);
        if (peers[peerId]) return; // Already have a connection with this peer

        const peer = new RTCPeerConnection();
        peers[peerId] = peer;

        stream.getTracks().forEach((track) => peer.addTrack(track, stream));

        peer.ontrack = (event) => {
          const remoteVideo = document.createElement("video");
          remoteVideo.autoplay = true;
          remoteVideo.srcObject = event.streams[0];
          remoteContainer.appendChild(remoteVideo);
        };

        peer.onicecandidate = (event) => {
          if (event.candidate) {
            sendSignal("candidate", event.candidate, peerId);
          }
        };

        peer
          .createOffer()
          .then((offer) => peer.setLocalDescription(offer))
          .then(() => sendSignal("offer", peer.localDescription, peerId));
      }

      function handleOffer(offer, peerId, stream) {
        console.log("offer, peerId = ", offer, peerId);
        // console.log("handleOffer 1");
        const peer = peers[peerId] || new RTCPeerConnection(); // Reuse if exists
        // console.log("handleOffer 2");
        peers[peerId] = peer;
        // console.log("handleOffer 3");

        if (!peer.getLocalStreams().length) {
          // console.log("handleOffer 4");

          // Add tracks if not already added
          stream.getTracks().forEach((track) => peer.addTrack(track, stream));
        }
        // console.log("peer.onicecandidate........ - ");
        peer.onicecandidate = (event) => {
          if (event.candidate) {
            // console.log("event.candidate = ", event.candidate);
            sendSignal("candidate", event.candidate, peerId);
          }
        };

        console.log("setRemoteDescription............ - ");
        peer
          .setRemoteDescription(new RTCSessionDescription(offer))
          .then(() => peer.createAnswer())
          .then((answer) => peer.setLocalDescription(answer))
          .then(() => sendSignal("answer", peer.localDescription, peerId))
          .catch((error) => console.log("error in asnwer  = ", error));
      }

      function handleAnswer(answer, peerId) {
        peers[peerId].setRemoteDescription(new RTCSessionDescription(answer));
      }

      function handleCandidate(candidate, peerId) {
        try {
          if (candidate) {
            const iceCandidate = new RTCIceCandidate(candidate);
            peers[peerId]
              .addIceCandidate(iceCandidate)
              .catch((err) =>
                console.error("Error adding ICE candidate:", err)
              );
          }
        } catch (e) {
          console.error("Error in handleCandidate", e, candidate);
        }
      }

      function sendSignal(type, payload, targetPeerId) {
        console.log("inside sendsignal -", myPeerId);
        let candidate = payload; // Store payload in candidate variable
        if (type === "candidate" && payload) {
          candidate = {
            // Ensure candidate has necessary properties
            candidate: payload.candidate,
            sdpMid: payload.sdpMid,
            sdpMLineIndex: payload.sdpMLineIndex,
          };
        }
        console.log("sending signal - ", {
          type,
          payload: candidate, // Send the potentially modified candidate
          targetPeerId,
          meetingId,
          peerId: myPeerId,
        });
        ws.send(
          JSON.stringify({
            type,
            payload: candidate, // Send the potentially modified candidate
            targetPeerId,
            meetingId,
            peerId: myPeerId,
          })
        );
      }

      function handleRemoteDisconnection(peerId) {
        const peer = peers[peerId];
        if (peer) {
          peer.close();
          delete peers[peerId];

          // Remove remote video element
          const remoteVideo = document.querySelector(`#remoteVideos video`); // More specific selector
          if (remoteVideo) {
            remoteContainer.removeChild(remoteVideo);
          }
        }
      }

      function leaveMeeting() {
        ws.send(JSON.stringify({ type: "leave-meeting", meetingId }));
        ws.close();
        window.location.href = "/"; // Or any other cleanup you need
      }
    </script>
  </body>
</html>
